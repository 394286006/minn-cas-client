<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.0.xsd"
	default-lazy-init="true">

	<description>spring security cas config</description>
	 <import  resource="classpath*:spring/applicationContext-oauth2-spring-security.xml"/>
	 <context:property-placeholder ignore-unresolvable="true" location="classpath*:/spring/application.cas.properties" />
	<context:component-scan base-package="p.minn.security.cas.springsecurity.auth,p.minn.security.auth,p.minn.security.service,p.minn.security.oauth" />
	 
	  <sec:http entry-point-ref="casEntryPoint" use-expressions="true">
	      <sec:headers>
	     <sec:frame-options policy="SAMEORIGIN"/>
	     </sec:headers>
         <sec:intercept-url pattern="/" access="hasRole('ROLE_SUPERADMIN')"/>
           <sec:intercept-url pattern="/logout" access="hasRole('ROLE_SUPERADMIN')"/>
         <sec:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <sec:custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <sec:custom-filter ref="casFilter" position="CAS_FILTER" />
        <sec:logout logout-success-url="/"/>
        <sec:csrf disabled="true"/>
    </sec:http>

	<sec:authentication-manager  alias="authManager">
	  <sec:authentication-provider  ref="casAuthProvider">
	  </sec:authentication-provider>
	  <sec:authentication-provider>
	    <sec:jdbc-user-service data-source-ref="privilegedataSource"
				users-by-username-query="select name as username, pwd as password, 1 from user where name = ?"
				authorities-by-username-query="select u.name as username,r.code as role from user u,role as r,user_role ur where u.id=ur.user_id and ur.role_id=r.id and u.name=?" />
	  </sec:authentication-provider>
	</sec:authentication-manager>
	<alias name="securityDbRealm" alias="userDbService"/>
	 
	  <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <constructor-arg value="http://${minn.cas.service.host}/admin"/>
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </constructor-arg>
    </bean>

    <bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="http://${minn.cas.service.host}/admin/"
        p:sendRenew="true" 
        p:authenticateAllArtifacts="true"/>
    <bean id="casEntryPoint"
        class="p.minn.security.cas.springsecurity.auth.MyCasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" p:loginUrl="http://${minn.cas.server.host}/cas/login" />
    <bean id="casFilter"
        class="p.minn.security.cas.springsecurity.auth.MyCasAuthenticationFilter"
        p:authenticationManager-ref="authManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage" 
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <property name="authenticationDetailsSource">
            <bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource">
            <constructor-arg ref="serviceProperties"></constructor-arg>
            </bean>
        </property>
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/error/fail.jsp"/>
        </property>
    </bean>
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>
    <bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <property name="authenticationUserDetailsService">
            <bean
                class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <constructor-arg ref="userDbService" />
            </bean>
        </property>
        <property name="ticketValidator">
            <bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="http://${minn.cas.service.host}/admin/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <constructor-arg value="http://${minn.cas.server.host}/cas" />
            </bean>
        </property>
        <property name="statelessTicketCache">
            <bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <property name="cache">
                    <bean id="ehcache" class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <constructor-arg value="casTickets"/>
                        <constructor-arg value="50"/>
                        <constructor-arg value="true"/>
                        <constructor-arg value="false"/>
                        <constructor-arg value="3600"/>
                        <constructor-arg value="900"/>
                        <property name="cacheManager">
                            <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
		
</beans>